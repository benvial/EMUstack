
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/simo_020-thin_film_multilayered_stack.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_simo_020-thin_film_multilayered_stack.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_simo_020-thin_film_multilayered_stack.py:


Multilayered stack
=================

Simulating a stack of homogeneous, dispersive media.

.. GENERATED FROM PYTHON SOURCE LINES 25-102

.. code-block:: Python


    import datetime
    import time
    from multiprocessing import Pool

    import numpy as np

    from emustack import materials, objects, plotting
    from emustack.stack import *

    start = time.time()

    # Remove results of previous simulations.
    plotting.clear_previous()

    ################ Simulation parameters ################
    # Select the number of CPUs to use in simulation.
    num_cores = 1

    ################ Light parameters #####################
    wl_1 = 400
    wl_2 = 800
    no_wl_1 = 400
    wavelengths = np.linspace(wl_1, wl_2, no_wl_1)
    light_list = [
        objects.Light(wl, max_order_PWs=1, theta=0.0, phi=0.0) for wl in wavelengths
    ]

    # The period must be consistent throughout a simulation!
    period = 300

    # Define each layer of the structure.
    superstrate = objects.ThinFilm(period, height_nm="semi_inf", material=materials.Air)
    # Define a thin film with (finite) thickness in nm and constant refractive index
    TF_1 = objects.ThinFilm(period, height_nm=100, material=materials.Material(1.0 + 0.05j))
    # EMUstack calculation time is independent dispersion and thickness of layer!
    # This layer is made of Indium Phosphide, the tabulated refractive index of which
    # is stored in EMUstack/data/
    # We artificially set the imaginary part of the layer to zero for all wavelengths.
    TF_2 = objects.ThinFilm(period, height_nm=5e2, material=materials.InP, loss=False)
    # By default loss = True
    TF_3 = objects.ThinFilm(period, height_nm=52, material=materials.Si_a)
    # Note that the semi-inf substrate must be lossess so that EMUstack can distinguish
    # propagating plane waves that carry energy from evanescent waves which do not.
    # This layer is therefore crystalline silicon with Im(n) == 0.
    substrate = objects.ThinFilm(
        period, height_nm="semi_inf", material=materials.Si_c, loss=False
    )


    def simulate_stack(light):
        ################ Evaluate each layer individually ##############
        sim_superstrate = superstrate.calc_modes(light)
        sim_TF_1 = TF_1.calc_modes(light)
        sim_TF_2 = TF_2.calc_modes(light)
        sim_TF_3 = TF_3.calc_modes(light)
        sim_substrate = substrate.calc_modes(light)
        ###################### Evaluate structure ######################
        """ Now define full structure. Here order is critical and
            stack list MUST be ordered from bottom to top!
        """
        # We can now stack these layers of finite thickness however we wish.
        stack = Stack(
            (sim_substrate, sim_TF_1, sim_TF_3, sim_TF_2, sim_TF_1, sim_superstrate)
        )
        stack.calc_scat(pol="TM")

        return stack


    # Run wavelengths in parallel across num_cores CPUs using multiprocessing package.
    pool = Pool(num_cores)
    stacks_list = pool.map(simulate_stack, light_list)
    # stacks_list = [simulate_stack(l) for l in light_list]
    # Save full simo data to .npz file for safe keeping!
    np.savez("Simo_results", stacks_list=stacks_list)








.. GENERATED FROM PYTHON SOURCE LINES 103-104

We will now see the absorption in each individual layer as well as of the stack.

.. GENERATED FROM PYTHON SOURCE LINES 104-106

.. code-block:: Python

    plotting.t_r_a_plots(stacks_list)




.. image-sg:: /examples/images/sphx_glr_simo_020-thin_film_multilayered_stack_001.png
   :alt: PW_radius = 1,  $h_t,...,h_b$ = 100.000000, 500.000000, 52.000000, 100.000000, 
   :srcset: /examples/images/sphx_glr_simo_020-thin_film_multilayered_stack_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-127

.. code-block:: Python

    print("\n*******************************************")
    # Calculate and record the (real) time taken for simulation,
    elapsed = time.time() - start
    hms = str(datetime.timedelta(seconds=elapsed))
    hms_string = (
        "Total time for simulation was \n \
        %(hms)s (%(elapsed)12.3f seconds)"
        % {
            "hms": hms,
            "elapsed": elapsed,
        }
    )
    print(hms_string)
    print("*******************************************")
    print("")

    # and store this info.
    python_log = open("python_log.log", "w")
    python_log.write(hms_string)
    python_log.close()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    *******************************************
    Total time for simulation was 
         0:00:01.296553 (       1.297 seconds)
    *******************************************






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.427 seconds)

**Estimated memory usage:**  38 MB


.. _sphx_glr_download_examples_simo_020-thin_film_multilayered_stack.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: simo_020-thin_film_multilayered_stack.ipynb <simo_020-thin_film_multilayered_stack.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: simo_020-thin_film_multilayered_stack.py <simo_020-thin_film_multilayered_stack.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
