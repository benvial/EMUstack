
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/simo_041-combining_1D_and_2D_array.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_simo_041-combining_1D_and_2D_array.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_simo_041-combining_1D_and_2D_array.py:


Combining 1D and 2D arrays
==========================

Combining 1D gratings and 2D arrays in the same stack.

.. GENERATED FROM PYTHON SOURCE LINES 25-126

.. code-block:: Python


    import datetime
    import time
    from multiprocessing import Pool

    import numpy as np

    from emustack import materials, objects, plotting
    from emustack.stack import *

    start = time.time()
    ################ Simulation parameters ################

    # Number of CPUs to use in simulation
    num_cores = 1

    # Remove results of previous simulations
    plotting.clear_previous()

    ################ Light parameters #####################
    wl_1 = 310
    wl_2 = 1127
    no_wl_1 = 1
    # Set up light objects
    wavelengths = np.linspace(wl_1, wl_2, no_wl_1)
    light_list = [
        objects.Light(wl, max_order_PWs=2, theta=0.0, phi=0.0) for wl in wavelengths
    ]


    # Period must be consistent throughout simulation!!!
    period = 600

    # In this example we set the number of Bloch modes to use in the simulation
    # Be default it is set to be slightly greater than the number of PWs.
    num_BMs = 111

    superstrate = objects.ThinFilm(
        period, height_nm="semi_inf", material=materials.Air, loss=False
    )

    substrate = objects.ThinFilm(
        period, height_nm="semi_inf", material=materials.SiO2, loss=False
    )

    NW_diameter = 120
    NW_array = objects.NanoStruct(
        "2D_array",
        period,
        NW_diameter,
        height_nm=2330,
        inclusion_a=materials.Si_c,
        background=materials.Air,
        loss=True,
        make_mesh_now=True,
        force_mesh=True,
        lc_bkg=0.1,
        lc2=2.0,
    )

    # We now create a 1D grating that is periodic in x only, but whose scattering
    # matrices are constructed with of the 2D plane wave basis. This allows this layer
    # to be combined with 2D_arrays.
    grating = objects.NanoStruct(
        "1D_array",
        period,
        int(round(0.75 * period)),
        height_nm=2900,
        background=materials.Material(1.46 + 0.0j),
        inclusion_a=materials.Material(5.0 + 0.0j),
        loss=True,
        lc_bkg=0.1,
        world_1d=False,
    )


    def simulate_stack(light):

        ################ Evaluate each layer individually ##############
        sim_superstrate = superstrate.calc_modes(light)
        sim_substrate = substrate.calc_modes(light)
        sim_NWs = NW_array.calc_modes(light, num_BMs=num_BMs)

        ###################### Evaluate structure ######################
        """ Now define full structure. Here order is critical and
            stack list MUST be ordered from bottom to top!
        """

        stack = Stack((sim_substrate, sim_NWs, sim_superstrate))
        stack.calc_scat(pol="TE")

        return stack


    # Run in parallel across wavelengths.
    pool = Pool(num_cores)
    stacks_list = pool.map(simulate_stack, light_list)
    # Save full simo data to .npz file for safe keeping!
    np.savez("Simo_results", stacks_list=stacks_list)





.. image-sg:: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_001.png
   :alt: simo 041 combining 1D and 2D array
   :srcset: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 127-134

.. code-block:: Python


    # Plot the transmission, reflection and absorption.
    plotting.t_r_a_plots(stacks_list, active_layer_nu=1)

    # We also plot the dispersion relation for the NW layer.
    plotting.omega_plot(stacks_list, wavelengths)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_002.png
         :alt: ff = 0.031, d = 600, a1 = 120, 111BMs, PW_radius = 2,  $h_t,...,h_b$ = 2330.000000, 
         :srcset: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_003.png
         :alt: Real $k_z$ff = 0.031, d = 600, a1 = 120, 111BMs, PW_radius = 2,  
         :srcset: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_004.png
         :alt: Imaginary $k_z$ff = 0.031, d = 600, a1 = 120, 111BMs, PW_radius = 2,  
         :srcset: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_005.png
         :alt: Real $k_z$ff = 0.031, d = 600, a1 = 120, 111BMs, PW_radius = 2,  
         :srcset: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_006.png
         :alt: Imaginary $k_z$ff = 0.031, d = 600, a1 = 120, 111BMs, PW_radius = 2,  
         :srcset: /examples/images/sphx_glr_simo_041-combining_1D_and_2D_array_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    t_r_a_plots is guessing you have a single wavelength, else specify xvalues.




.. GENERATED FROM PYTHON SOURCE LINES 135-136

Calculate and record the (real) time taken for simulation

.. GENERATED FROM PYTHON SOURCE LINES 136-154

.. code-block:: Python

    elapsed = time.time() - start
    hms = str(datetime.timedelta(seconds=elapsed))
    hms_string = (
        "Total time for simulation was \n \
        %(hms)s (%(elapsed)12.3f seconds)"
        % {
            "hms": hms,
            "elapsed": elapsed,
        }
    )

    python_log = open("python_log.log", "w")
    python_log.write(hms_string)
    python_log.close()

    print(hms_string)
    print("*******************************************")
    print("")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Total time for simulation was 
         0:00:19.190490 (      19.190 seconds)
    *******************************************






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 19.404 seconds)

**Estimated memory usage:**  107 MB


.. _sphx_glr_download_examples_simo_041-combining_1D_and_2D_array.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: simo_041-combining_1D_and_2D_array.ipynb <simo_041-combining_1D_and_2D_array.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: simo_041-combining_1D_and_2D_array.py <simo_041-combining_1D_and_2D_array.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
