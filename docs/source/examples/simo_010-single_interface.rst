
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/simo_010-single_interface.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_simo_010-single_interface.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_simo_010-single_interface.py:


Single interface
=================

Simulating an interface between 2 homogeneous, non-dispersive media.

.. GENERATED FROM PYTHON SOURCE LINES 25-37

.. code-block:: Python


    import datetime
    import time
    from multiprocessing import Pool

    import numpy as np

    from emustack import materials, objects, plotting
    from emustack.stack import *

    start = time.time()








.. GENERATED FROM PYTHON SOURCE LINES 38-40

Parameters
----------------

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: Python

    wl_1 = 500
    wl_2 = 600
    no_wl_1 = 4








.. GENERATED FROM PYTHON SOURCE LINES 45-46

Set up light objects, starting with the wavelengths,

.. GENERATED FROM PYTHON SOURCE LINES 46-47

.. code-block:: Python

    wavelengths = np.linspace(wl_1, wl_2, no_wl_1)







.. GENERATED FROM PYTHON SOURCE LINES 48-52

and also specifying angles of incidence and refractive medium of semi-infinite
layer that the light is incident upon (default value is n_inc = 1.0).
Fields in homogeneous layers are expressed in a Fourier series of diffraction
orders,where all orders within a radius of max_order_PWs in k-space are included.

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: Python

    light_list = [
        objects.Light(wl, max_order_PWs=1, theta=0.0, phi=0.0, n_inc=1.5)
        for wl in wavelengths
    ]








.. GENERATED FROM PYTHON SOURCE LINES 58-61

Our structure must have a period, even if this is artificially imposed
on a homogeneous thin film. What's more,
it is critical that the period be consistent throughout a simulation!

.. GENERATED FROM PYTHON SOURCE LINES 61-63

.. code-block:: Python

    period = 300








.. GENERATED FROM PYTHON SOURCE LINES 64-65

Define each layer of the structure.

.. GENERATED FROM PYTHON SOURCE LINES 65-73

.. code-block:: Python

    superstrate = objects.ThinFilm(
        period, height_nm="semi_inf", material=materials.Material(1.5 + 0.0j)
    )
    substrate = objects.ThinFilm(
        period, height_nm="semi_inf", material=materials.Material(3.0 + 0.0j)
    )









.. GENERATED FROM PYTHON SOURCE LINES 74-76

Simulation
-----------

.. GENERATED FROM PYTHON SOURCE LINES 76-96

.. code-block:: Python



    def simulate_stack(light):
        ################ Evaluate each layer individually ##############
        sim_superstrate = superstrate.calc_modes(light)
        sim_substrate = substrate.calc_modes(light)
        ###################### Evaluate structure ######################
        """ Now define full structure. Here order is critical and
            stack list MUST be ordered from bottom to top!
        """

        stack = Stack((sim_substrate, sim_superstrate))
        # Calculate scattering matrices of the stack (for all polarisations).
        stack.calc_scat(pol="TE")  # Incident light has TE polarisation,
        # which only effects the net transmission etc, not the matrices.

        return stack


    stacks_list = list(map(simulate_stack, light_list))







.. GENERATED FROM PYTHON SOURCE LINES 97-98

Save full simo data to .npz file for safe keeping!

.. GENERATED FROM PYTHON SOURCE LINES 98-100

.. code-block:: Python

    np.savez("Simo_results", stacks_list=stacks_list)








.. GENERATED FROM PYTHON SOURCE LINES 101-118

Calculation of the modes and scattering matrices of each layer
as well as the scattering matrices of the interfaces of the stack
is complete.
From here on we can print, plot or manipulate the results.

Alternatively, you may wish to finish the simo file here,
and be output into an interactive python instance were you
have access to all simulation objects and results for further
manipulation. In this case you run this file as
$ python -i simo_010-single_interface.py
In this session the docstrings of objects/classes/methods
can be accessed by typing

>>> from pydoc import help
>>> help(objects.Light)

where we have accessed the docstring of the Light class from objects.py

.. GENERATED FROM PYTHON SOURCE LINES 120-124

Post Processing
----------------
We can retrieve the propagation constants (k_z) of each layer.
Let's print the values at the short wavelength in the superstrate,

.. GENERATED FROM PYTHON SOURCE LINES 124-128

.. code-block:: Python

    wl_num = 0
    lay = 1
    betas = stacks_list[wl_num].layers[lay].k_z
    print("k_z of superstrate \n", betas)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    k_z of superstrate 
     [5.65486678+0.j         0.        +2.73877472j 0.        +2.73877698j
     0.        +2.73877698j 0.        +2.73877924j 5.65486678+0.j
     0.        +2.73877472j 0.        +2.73877698j 0.        +2.73877698j
     0.        +2.73877924j]




.. GENERATED FROM PYTHON SOURCE LINES 129-130

and save the values for the longest wavelength for the substrate.

.. GENERATED FROM PYTHON SOURCE LINES 130-134

.. code-block:: Python

    wl_num = -1
    lay = 0
    betas = stacks_list[wl_num].layers[lay].k_z
    np.savetxt("Substrate_k_zs.txt", betas.view(float).reshape(-1, 2))







.. GENERATED FROM PYTHON SOURCE LINES 135-143

Note that saving to txt files is slower than saving data as .npz
However txt files may be easily read by other programs...


We can also access the scattering matrices of individual layers,
and of interfaces of the stack.
For instance the reflection scattering matrix off the top
of the substrate when considered as an isolated layer.

.. GENERATED FROM PYTHON SOURCE LINES 143-148

.. code-block:: Python

    wl_num = -1
    lay = 0
    R12_sub = stacks_list[wl_num].layers[lay].R12
    print("R12 of substrate \n", R12_sub)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    R12 of substrate 
     [[-0.5       +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j        ]
     [ 0.        +0.j         -0.25000026+0.96824577j  0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j        ]
     [ 0.        +0.j          0.        +0.j         -0.25      +0.96824584j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j        ]
     [ 0.        +0.j          0.        +0.j          0.        +0.j
      -0.25      +0.96824584j  0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j        ]
     [ 0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j         -0.24999974+0.9682459j   0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j        ]
     [ 0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j         -0.5       +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j        ]
     [ 0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
      -0.9596774 -0.28110371j  0.        +0.j          0.        +0.j
       0.        +0.j        ]
     [ 0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j         -0.95967742-0.28110363j  0.        +0.j
       0.        +0.j        ]
     [ 0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j         -0.95967742-0.28110363j
       0.        +0.j        ]
     [ 0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
       0.        +0.j          0.        +0.j          0.        +0.j
      -0.95967744-0.28110355j]]




.. GENERATED FROM PYTHON SOURCE LINES 149-151

The reflection matrix for the reflection off the top of the
superstrate-substrate interface meanwhile is a property of the stack.

.. GENERATED FROM PYTHON SOURCE LINES 151-154

.. code-block:: Python

    R_interface = stacks_list[wl_num].R_net
    # Let us plot this matrix in greyscale.
    plotting.vis_scat_mats(R_interface)



.. image-sg:: /examples/images/sphx_glr_simo_010-single_interface_001.png
   :alt: Scattering Matrices
   :srcset: /examples/images/sphx_glr_simo_010-single_interface_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 155-160

Since all layers are homogeneous this matrix should only have non-zero
entries on the diagonal.

Lastly, we can also plot the transmission, reflection, absorption
of each layer and of the stack as a whole.

.. GENERATED FROM PYTHON SOURCE LINES 160-162

.. code-block:: Python

    plotting.t_r_a_plots(stacks_list)




.. image-sg:: /examples/images/sphx_glr_simo_010-single_interface_002.png
   :alt: PW_radius = 1,  $h_t,...,h_b$ = 
   :srcset: /examples/images/sphx_glr_simo_010-single_interface_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 163-164

p.s. we'll keep an eye on the time...

.. GENERATED FROM PYTHON SOURCE LINES 164-165

.. code-block:: Python

    print("\n*******************************************")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    *******************************************




.. GENERATED FROM PYTHON SOURCE LINES 166-169

Wrapping up:

Calculate and record the (real) time taken for simulation,

.. GENERATED FROM PYTHON SOURCE LINES 169-183

.. code-block:: Python

    elapsed = time.time() - start
    hms = str(datetime.timedelta(seconds=elapsed))
    hms_string = (
        "Total time for simulation was \n \
        %(hms)s (%(elapsed)12.3f seconds)"
        % {
            "hms": hms,
            "elapsed": elapsed,
        }
    )
    print(hms_string)
    print("*******************************************")
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Total time for simulation was 
         0:00:01.243306 (       1.243 seconds)
    *******************************************





.. GENERATED FROM PYTHON SOURCE LINES 184-185

and store this info.

.. GENERATED FROM PYTHON SOURCE LINES 185-188

.. code-block:: Python

    python_log = open("python_log.log", "w")
    python_log.write(hms_string)
    python_log.close()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.422 seconds)

**Estimated memory usage:**  15 MB


.. _sphx_glr_download_examples_simo_010-single_interface.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: simo_010-single_interface.ipynb <simo_010-single_interface.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: simo_010-single_interface.py <simo_010-single_interface.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
