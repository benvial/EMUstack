
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/simo_011-single_interface-dispersive.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_simo_011-single_interface-dispersive.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_simo_011-single_interface-dispersive.py:


Single interface dispersive
===========================

Simulating an interface between 2 homogeneous, dispersive media.
We use multiple CPUs.

.. GENERATED FROM PYTHON SOURCE LINES 26-39

.. code-block:: Python


    import time
    import datetime
    import numpy as np
    from multiprocessing import Pool

    from emustack import materials
    from emustack import objects
    from emustack import plotting
    from emustack.stack import *

    start = time.time()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ##################################################################
    EMUstack is brought to you by Bjorn Sturmberg, Kokou Dossou, 
    Felix Lawrence & Lindsay Botton, with support from CUDOS & ARENA
    Starting EMUstack calculation ...
    ##################################################################





.. GENERATED FROM PYTHON SOURCE LINES 40-41

We begin by remove all results of previous simulations.

.. GENERATED FROM PYTHON SOURCE LINES 41-57

.. code-block:: Python

    plotting.clear_previous()

    ################ Simulation parameters ################
    # Select the number of CPUs to use in simulation.
    num_cores = 2

    ################ Light parameters #####################
    wl_1     = 400
    wl_2     = 800
    no_wl_1  = 4
    # Set up light objects (no need to specifiy n_inc as light incident from
    # Air with n_inc = 1.0).
    wavelengths = np.linspace(wl_1, wl_2, no_wl_1)
    light_list  = [objects.Light(wl, max_order_PWs = 1, theta = 0.0, phi = 0.0) \
        for wl in wavelengths]








.. GENERATED FROM PYTHON SOURCE LINES 58-59

The period must be consistent throughout a simulation!

.. GENERATED FROM PYTHON SOURCE LINES 59-61

.. code-block:: Python

    period = 300








.. GENERATED FROM PYTHON SOURCE LINES 62-64

Define each layer of the structure, now with dispersive media.
The refractive indices are interpolated from tabulated data.

.. GENERATED FROM PYTHON SOURCE LINES 64-83

.. code-block:: Python

    superstrate = objects.ThinFilm(period, height_nm = 'semi_inf',
        material = materials.Air)
    substrate   = objects.ThinFilm(period, height_nm = 'semi_inf',
        material = materials.SiO2) # Amorphous silica

    def simulate_stack(light):
        ################ Evaluate each layer individually ##############
        sim_superstrate = superstrate.calc_modes(light)
        sim_substrate   = substrate.calc_modes(light)
        ###################### Evaluate structure ######################
        """ Now define full structure. Here order is critical and
            stack list MUST be ordered from bottom to top!
        """

        stack = Stack((sim_substrate, sim_superstrate))
        stack.calc_scat(pol = 'TM') # This time TM polarised light is incident.

        return stack








.. GENERATED FROM PYTHON SOURCE LINES 84-85

Run wavelengths in parallel across num_cores CPUs using multiprocessing package.

.. GENERATED FROM PYTHON SOURCE LINES 85-87

.. code-block:: Python

    pool = Pool(num_cores)
    stacks_list = pool.map(simulate_stack, light_list)







.. GENERATED FROM PYTHON SOURCE LINES 88-89

Save full simo data to .npz file for safe keeping!

.. GENERATED FROM PYTHON SOURCE LINES 89-90

.. code-block:: Python

    np.savez('Simo_results', stacks_list=stacks_list)







.. GENERATED FROM PYTHON SOURCE LINES 91-97

Post Processing

This time let's visualise the net Transmission scattering matrix,
which describes the propagation of light all the way from the superstrate into
the substrate. When studying diffractive layers it is useful to know how many
of theplane waves of the substrate are propagating, so lets include this.

.. GENERATED FROM PYTHON SOURCE LINES 97-102

.. code-block:: Python

    wl_num = -1
    T_net = stacks_list[wl_num].T_net
    nu_prop = stacks_list[wl_num].layers[0].num_prop_pw_per_pol
    plotting.vis_scat_mats(T_net, nu_prop_PWs=nu_prop)




.. image-sg:: /examples/images/sphx_glr_simo_011-single_interface-dispersive_001.png
   :alt: Scattering Matrices
   :srcset: /examples/images/sphx_glr_simo_011-single_interface-dispersive_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 103-104

Let's just plot the spectra and see the effect of changing refractive indices.

.. GENERATED FROM PYTHON SOURCE LINES 104-106

.. code-block:: Python

    plotting.t_r_a_plots(stacks_list)




.. image-sg:: /examples/images/sphx_glr_simo_011-single_interface-dispersive_002.png
   :alt: PW_radius = 1,  $h_t,...,h_b$ = 
   :srcset: /examples/images/sphx_glr_simo_011-single_interface-dispersive_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-108

.. code-block:: Python

    print('\n*******************************************')




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    *******************************************




.. GENERATED FROM PYTHON SOURCE LINES 109-110

Calculate and record the (real) time taken for simulation,

.. GENERATED FROM PYTHON SOURCE LINES 110-120

.. code-block:: Python

    elapsed = (time.time() - start)
    hms     = str(datetime.timedelta(seconds=elapsed))
    hms_string = 'Total time for simulation was \n \
        %(hms)s (%(elapsed)12.3f seconds)'% {
                'hms'       : hms,
                'elapsed'   : elapsed, }
    print(hms_string)
    print('*******************************************')
    print('')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Total time for simulation was 
         0:00:01.223437 (       1.223 seconds)
    *******************************************





.. GENERATED FROM PYTHON SOURCE LINES 121-122

and store this info.

.. GENERATED FROM PYTHON SOURCE LINES 122-125

.. code-block:: Python

    python_log = open("python_log.log", "w")
    python_log.write(hms_string)
    python_log.close()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.500 seconds)

**Estimated memory usage:**  55 MB


.. _sphx_glr_download_examples_simo_011-single_interface-dispersive.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: simo_011-single_interface-dispersive.ipynb <simo_011-single_interface-dispersive.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: simo_011-single_interface-dispersive.py <simo_011-single_interface-dispersive.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
