
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/simo_030-1D_grating.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_simo_030-1D_grating.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_simo_030-1D_grating.py:


Lamellar grating
================

Simulating a lamellar grating that is periodic in x only.
For this simulation EMUstack uses the 1D diffraction orders for the basis
of the plane waves and carries out a 1D FEM calculation for the modes of
the grating.

.. GENERATED FROM PYTHON SOURCE LINES 28-99

.. code-block:: Python



    import time
    import datetime
    import numpy as np
    from multiprocessing import Pool

    from emustack import materials
    from emustack import objects
    from emustack import plotting
    from emustack.stack import *


    start = time.time()

    # Remove results of previous simulations.
    plotting.clear_previous()

    ################ Simulation parameters ################
    # Select the number of CPUs to use in simulation.
    num_cores = 2

    ################ Light parameters #####################
    wl_1     = 400
    wl_2     = 800
    no_wl_1  = 2
    wavelengths = np.linspace(wl_1, wl_2, no_wl_1)
    light_list  = [objects.Light(wl, max_order_PWs = 5, theta = 0.0, phi = 0.0) for wl in wavelengths]

    # The period must be consistent throughout a simulation!
    period = 300

    # Define each layer of the structure
    # We need to inform EMUstack at this point that all layers in the stack will
    # be at most be periodic in one dimension (i.e. there are no '2D_arrays's).
    # This is done with the Keyword Arg 'world_1d' and all homogenous layers are
    # calculated using the PW basis of 1D diffraction orders.
    superstrate = objects.ThinFilm(period, height_nm = 'semi_inf', world_1d=True,
        material = materials.Air)

    substrate   = objects.ThinFilm(period, height_nm = 'semi_inf', world_1d=True,
        material = materials.Air)
    # Define 1D grating that is periodic in x.
    # The mesh for this is always made 'live' in objects.py the number of
    # FEM elements used is given by 1/lc_bkg.
    # See Fortran Backends section of tutorial for more details.
    grating = objects.NanoStruct('1D_array', period, int(round(0.75*period)), height_nm = 2900,
        background = materials.Material(1.46 + 0.0j), inclusion_a = materials.Material(5.0 + 0.0j),
        loss = True, lc_bkg = 0.0051)

    def simulate_stack(light):
        ################ Evaluate each layer individually ##############
        sim_superstrate = superstrate.calc_modes(light)
        sim_grating     = grating.calc_modes(light)
        sim_substrate   = substrate.calc_modes(light)
        ###################### Evaluate structure ######################
        """ Now define full structure. Here order is critical and
            stack list MUST be ordered from bottom to top!
        """

        stack = Stack((sim_substrate, sim_grating, sim_superstrate))
        stack.calc_scat(pol = 'TE')

        return stack

    pool = Pool(num_cores)
    # stacks_list = pool.map(simulate_stack, light_list)
    stacks_list = list(map(simulate_stack, light_list))
    # Save full simo data to .npz file for safe keeping!
    np.savez('Simo_results', stacks_list=stacks_list)




.. image-sg:: /examples/images/sphx_glr_simo_030-1D_grating_001.png
   :alt: simo 030 1D grating
   :srcset: /examples/images/sphx_glr_simo_030-1D_grating_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ##################################################################
    EMUstack is brought to you by Bjorn Sturmberg, Kokou Dossou, 
    Felix Lawrence & Lindsay Botton, with support from CUDOS & ARENA
    Starting EMUstack calculation ...
    ##################################################################





.. GENERATED FROM PYTHON SOURCE LINES 100-101

The total transmission should be zero.

.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: Python

    plotting.t_r_a_plots(stacks_list)




.. image-sg:: /examples/images/sphx_glr_simo_030-1D_grating_002.png
   :alt: ff = 0.750, d = 300, a1 = 225, 42BMs, PW_radius = 5,  $h_t,...,h_b$ = 2900.000000, 
   :srcset: /examples/images/sphx_glr_simo_030-1D_grating_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 104-120

.. code-block:: Python

    print('\n*******************************************')
    # Calculate and record the (real) time taken for simulation,
    elapsed = (time.time() - start)
    hms     = str(datetime.timedelta(seconds=elapsed))
    hms_string = 'Total time for simulation was \n \
        %(hms)s (%(elapsed)12.3f seconds)'% {
                'hms'       : hms,
                'elapsed'   : elapsed, }
    print(hms_string)
    print('*******************************************')
    print('')

    # and store this info.
    python_log = open("python_log.log", "w")
    python_log.write(hms_string)
    python_log.close()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    *******************************************
    Total time for simulation was 
         0:00:03.242912 (       3.243 seconds)
    *******************************************






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.429 seconds)

**Estimated memory usage:**  162 MB


.. _sphx_glr_download_examples_simo_030-1D_grating.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: simo_030-1D_grating.ipynb <simo_030-1D_grating.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: simo_030-1D_grating.py <simo_030-1D_grating.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
