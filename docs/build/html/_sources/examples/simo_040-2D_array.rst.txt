
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/simo_040-2D_array.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_simo_040-2D_array.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_simo_040-2D_array.py:


Nanowire array
==============

Simulating a nanowire array with period 600 nm and NW diameter 120 nm.

.. GENERATED FROM PYTHON SOURCE LINES 25-108

.. code-block:: Python



    import time
    import datetime
    import numpy as np
    from multiprocessing import Pool

    from emustack import materials
    from emustack import objects
    from emustack import plotting
    from emustack.stack import *

    start = time.time()
    ################ Simulation parameters ################

    # Number of CPUs to use in simulation
    num_cores = 2

    # Remove results of previous simulations
    plotting.clear_previous()

    ################ Light parameters #####################
    wl_1     = 310
    wl_2     = 1127
    no_wl_1  = 3
    # Set up light objects
    wavelengths = np.linspace(wl_1, wl_2, no_wl_1)
    light_list  = [objects.Light(wl, max_order_PWs = 2, theta = 0.0, phi = 0.0) \
        for wl in wavelengths]

    # Period must be consistent throughout simulation!!!
    period = 600

    # In this example we set the number of Bloch modes to use in the simulation
    # Be default it is set to be slightly greater than the number of PWs.
    num_BMs = 200

    superstrate = objects.ThinFilm(period, height_nm = 'semi_inf',
        material = materials.Air, loss = False)

    substrate  = objects.ThinFilm(period, height_nm = 'semi_inf',
        material = materials.SiO2, loss = False)

    NW_diameter = 120
    NW_array = objects.NanoStruct('2D_array', period, NW_diameter, height_nm = 2330,
        inclusion_a = materials.Si_c, background = materials.Air, loss = True,
        make_mesh_now = True, force_mesh = True, lc_bkg = 0.1, lc2= 2.0)
    # Here we get EMUstack to make the FEM mesh automagically using our input parameters.
    # the lc_bkg parameter sets the baseline distance between points on the FEM mesh,
    # lc_bkg/lc2 is the distance between mesh points that lie on the inclusion boundary.
    # There are higher lc parameters which are used when including multiple inclusions.

    # Alternatively we can specify a pre-made mesh as follows.
    NW_array2 = objects.NanoStruct('2D_array', period, NW_diameter, height_nm = 2330,
        inclusion_a = materials.Si_c, background = materials.Air, loss = True,
        make_mesh_now = False, mesh_file='4testing-600_120.mail')


    def simulate_stack(light):

        ################ Evaluate each layer individually ##############
        sim_superstrate = superstrate.calc_modes(light)
        sim_substrate   = substrate.calc_modes(light)
        sim_NWs         = NW_array.calc_modes(light, num_BMs=num_BMs)

        ###################### Evaluate structure ######################
        """ Now define full structure. Here order is critical and
            stack list MUST be ordered from bottom to top!
        """

        stack = Stack((sim_substrate, sim_NWs, sim_superstrate))
        stack.calc_scat(pol = 'TE')

        return stack


    # Run in parallel across wavelengths.
    pool = Pool(num_cores)
    stacks_list = pool.map(simulate_stack, light_list)
    # Save full simo data to .npz file for safe keeping!
    np.savez('Simo_results', stacks_list=stacks_list)









.. GENERATED FROM PYTHON SOURCE LINES 109-122

.. code-block:: Python


    # We here wish to know the photovoltaic performance of the structure,
    # where all light absorbed in the NW layer is considered to produce exactly
    # one electron-hole pair.
    # To do this we specify which layer of the stack is the PV active layer
    # (default active_layer_nu=1), and indicate that we want to calculate
    # the ideal short circuit current (J_sc) of the cell.
    # We could also calculate the 'ultimate efficiency' by setting ult_eta=True.
    plotting.t_r_a_plots(stacks_list, active_layer_nu=1, J_sc=True)

    # We also plot the dispersion relation for each layer.
    plotting.omega_plot(stacks_list, wavelengths)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/images/sphx_glr_simo_040-2D_array_001.png
         :alt: ff = 0.031, d = 600, a1 = 120, 200BMs, PW_radius = 2,  $h_t,...,h_b$ = 2330.000000, $J_{sc}$ =   1.10 mA/cm$^2$
         :srcset: /examples/images/sphx_glr_simo_040-2D_array_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_simo_040-2D_array_002.png
         :alt: Real $k_z$ff = 0.031, d = 600, a1 = 120, 200BMs, PW_radius = 2,  
         :srcset: /examples/images/sphx_glr_simo_040-2D_array_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_simo_040-2D_array_003.png
         :alt: Imaginary $k_z$ff = 0.031, d = 600, a1 = 120, 200BMs, PW_radius = 2,  
         :srcset: /examples/images/sphx_glr_simo_040-2D_array_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_simo_040-2D_array_004.png
         :alt: Real $k_z$ff = 0.031, d = 600, a1 = 120, 200BMs, PW_radius = 2,  
         :srcset: /examples/images/sphx_glr_simo_040-2D_array_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/images/sphx_glr_simo_040-2D_array_005.png
         :alt: Imaginary $k_z$ff = 0.031, d = 600, a1 = 120, 200BMs, PW_radius = 2,  
         :srcset: /examples/images/sphx_glr_simo_040-2D_array_005.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 123-124

Calculate and record the (real) time taken for simulation

.. GENERATED FROM PYTHON SOURCE LINES 124-138

.. code-block:: Python

    elapsed = (time.time() - start)
    hms     = str(datetime.timedelta(seconds=elapsed))
    hms_string = 'Total time for simulation was \n \
        %(hms)s (%(elapsed)12.3f seconds)'% {
                'hms'       : hms,
                'elapsed'   : elapsed, }

    python_log = open("python_log.log", "w")
    python_log.write(hms_string)
    python_log.close()

    print(hms_string)
    print('*******************************************')
    print('')




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Total time for simulation was 
         0:01:37.555201 (      97.555 seconds)
    *******************************************






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 37.658 seconds)

**Estimated memory usage:**  40 MB


.. _sphx_glr_download_examples_simo_040-2D_array.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: simo_040-2D_array.ipynb <simo_040-2D_array.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: simo_040-2D_array.py <simo_040-2D_array.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
